// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: pikachu/pkg/pb/service.proto

package pb

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"strings"
	"time"
	"unicode/utf8"

	"github.com/golang/protobuf/ptypes"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = ptypes.DynamicAny{}
)

// define the regex for a UUID once up-front
var _service_uuidPattern = regexp.MustCompile("^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$")

// Validate checks the field values on UserDto with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *UserDto) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for FirstName

	// no validation rules for LastName

	if v, ok := interface{}(m.GetDateOfBirth()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UserDtoValidationError{
				field:  "DateOfBirth",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Age

	// no validation rules for Height

	// no validation rules for Weight

	// no validation rules for Gender

	// no validation rules for Status

	// no validation rules for ExternalId

	return nil
}

// UserDtoValidationError is the validation error returned by UserDto.Validate
// if the designated constraints aren't met.
type UserDtoValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UserDtoValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UserDtoValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UserDtoValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UserDtoValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UserDtoValidationError) ErrorName() string { return "UserDtoValidationError" }

// Error satisfies the builtin error interface
func (e UserDtoValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUserDto.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UserDtoValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UserDtoValidationError{}

// Validate checks the field values on AddressDto with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *AddressDto) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Line1

	// no validation rules for Line2

	// no validation rules for ZipCode

	// no validation rules for State

	// no validation rules for Country

	return nil
}

// AddressDtoValidationError is the validation error returned by
// AddressDto.Validate if the designated constraints aren't met.
type AddressDtoValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddressDtoValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddressDtoValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddressDtoValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddressDtoValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddressDtoValidationError) ErrorName() string { return "AddressDtoValidationError" }

// Error satisfies the builtin error interface
func (e AddressDtoValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddressDto.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddressDtoValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddressDtoValidationError{}

// Validate checks the field values on IdentityDto with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *IdentityDto) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for IdentityType

	// no validation rules for IdentityValue

	// no validation rules for Status

	// no validation rules for ExternalId

	return nil
}

// IdentityDtoValidationError is the validation error returned by
// IdentityDto.Validate if the designated constraints aren't met.
type IdentityDtoValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdentityDtoValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdentityDtoValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdentityDtoValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdentityDtoValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdentityDtoValidationError) ErrorName() string { return "IdentityDtoValidationError" }

// Error satisfies the builtin error interface
func (e IdentityDtoValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdentityDto.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdentityDtoValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdentityDtoValidationError{}

// Validate checks the field values on RelationDto with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *RelationDto) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Status

	// no validation rules for Relation

	// no validation rules for UserId

	// no validation rules for DisplayOrder

	// no validation rules for PatientId

	return nil
}

// RelationDtoValidationError is the validation error returned by
// RelationDto.Validate if the designated constraints aren't met.
type RelationDtoValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RelationDtoValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RelationDtoValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RelationDtoValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RelationDtoValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RelationDtoValidationError) ErrorName() string { return "RelationDtoValidationError" }

// Error satisfies the builtin error interface
func (e RelationDtoValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRelationDto.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RelationDtoValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RelationDtoValidationError{}

// Validate checks the field values on UserRelationDto with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *UserRelationDto) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetUser()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UserRelationDtoValidationError{
				field:  "User",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetUserRelation()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UserRelationDtoValidationError{
				field:  "UserRelation",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// UserRelationDtoValidationError is the validation error returned by
// UserRelationDto.Validate if the designated constraints aren't met.
type UserRelationDtoValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UserRelationDtoValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UserRelationDtoValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UserRelationDtoValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UserRelationDtoValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UserRelationDtoValidationError) ErrorName() string { return "UserRelationDtoValidationError" }

// Error satisfies the builtin error interface
func (e UserRelationDtoValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUserRelationDto.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UserRelationDtoValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UserRelationDtoValidationError{}

// Validate checks the field values on LinkRelationRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *LinkRelationRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for UserId

	if v, ok := interface{}(m.GetUserRelation()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return LinkRelationRequestValidationError{
				field:  "UserRelation",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// LinkRelationRequestValidationError is the validation error returned by
// LinkRelationRequest.Validate if the designated constraints aren't met.
type LinkRelationRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LinkRelationRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LinkRelationRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LinkRelationRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LinkRelationRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LinkRelationRequestValidationError) ErrorName() string {
	return "LinkRelationRequestValidationError"
}

// Error satisfies the builtin error interface
func (e LinkRelationRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLinkRelationRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LinkRelationRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LinkRelationRequestValidationError{}

// Validate checks the field values on LinkRelationResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *LinkRelationResponse) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetPatient()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return LinkRelationResponseValidationError{
				field:  "Patient",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// LinkRelationResponseValidationError is the validation error returned by
// LinkRelationResponse.Validate if the designated constraints aren't met.
type LinkRelationResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LinkRelationResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LinkRelationResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LinkRelationResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LinkRelationResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LinkRelationResponseValidationError) ErrorName() string {
	return "LinkRelationResponseValidationError"
}

// Error satisfies the builtin error interface
func (e LinkRelationResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLinkRelationResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LinkRelationResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LinkRelationResponseValidationError{}

// Validate checks the field values on UnlinkRelationRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *UnlinkRelationRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for UserId

	// no validation rules for RelationId

	return nil
}

// UnlinkRelationRequestValidationError is the validation error returned by
// UnlinkRelationRequest.Validate if the designated constraints aren't met.
type UnlinkRelationRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UnlinkRelationRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UnlinkRelationRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UnlinkRelationRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UnlinkRelationRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UnlinkRelationRequestValidationError) ErrorName() string {
	return "UnlinkRelationRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UnlinkRelationRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUnlinkRelationRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UnlinkRelationRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UnlinkRelationRequestValidationError{}

// Validate checks the field values on UnlinkRelationResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *UnlinkRelationResponse) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// UnlinkRelationResponseValidationError is the validation error returned by
// UnlinkRelationResponse.Validate if the designated constraints aren't met.
type UnlinkRelationResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UnlinkRelationResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UnlinkRelationResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UnlinkRelationResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UnlinkRelationResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UnlinkRelationResponseValidationError) ErrorName() string {
	return "UnlinkRelationResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UnlinkRelationResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUnlinkRelationResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UnlinkRelationResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UnlinkRelationResponseValidationError{}

// Validate checks the field values on CreateUserRequest with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *CreateUserRequest) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetPayload()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateUserRequestValidationError{
				field:  "Payload",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// CreateUserRequestValidationError is the validation error returned by
// CreateUserRequest.Validate if the designated constraints aren't met.
type CreateUserRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateUserRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateUserRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateUserRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateUserRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateUserRequestValidationError) ErrorName() string {
	return "CreateUserRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateUserRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateUserRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateUserRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateUserRequestValidationError{}

// Validate checks the field values on UserOperationResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *UserOperationResponse) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetResponse()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UserOperationResponseValidationError{
				field:  "Response",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// UserOperationResponseValidationError is the validation error returned by
// UserOperationResponse.Validate if the designated constraints aren't met.
type UserOperationResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UserOperationResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UserOperationResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UserOperationResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UserOperationResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UserOperationResponseValidationError) ErrorName() string {
	return "UserOperationResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UserOperationResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUserOperationResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UserOperationResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UserOperationResponseValidationError{}

// Validate checks the field values on GetUserByExternalIdRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetUserByExternalIdRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for UserId

	return nil
}

// GetUserByExternalIdRequestValidationError is the validation error returned
// by GetUserByExternalIdRequest.Validate if the designated constraints aren't met.
type GetUserByExternalIdRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetUserByExternalIdRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetUserByExternalIdRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetUserByExternalIdRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetUserByExternalIdRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetUserByExternalIdRequestValidationError) ErrorName() string {
	return "GetUserByExternalIdRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetUserByExternalIdRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetUserByExternalIdRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetUserByExternalIdRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetUserByExternalIdRequestValidationError{}

// Validate checks the field values on GetUserByInternalIdRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetUserByInternalIdRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for UserId

	return nil
}

// GetUserByInternalIdRequestValidationError is the validation error returned
// by GetUserByInternalIdRequest.Validate if the designated constraints aren't met.
type GetUserByInternalIdRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetUserByInternalIdRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetUserByInternalIdRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetUserByInternalIdRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetUserByInternalIdRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetUserByInternalIdRequestValidationError) ErrorName() string {
	return "GetUserByInternalIdRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetUserByInternalIdRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetUserByInternalIdRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetUserByInternalIdRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetUserByInternalIdRequestValidationError{}

// Validate checks the field values on GetUserByIdResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetUserByIdResponse) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetResponse()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetUserByIdResponseValidationError{
				field:  "Response",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// GetUserByIdResponseValidationError is the validation error returned by
// GetUserByIdResponse.Validate if the designated constraints aren't met.
type GetUserByIdResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetUserByIdResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetUserByIdResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetUserByIdResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetUserByIdResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetUserByIdResponseValidationError) ErrorName() string {
	return "GetUserByIdResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetUserByIdResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetUserByIdResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetUserByIdResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetUserByIdResponseValidationError{}

// Validate checks the field values on UpdateUserRequest with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *UpdateUserRequest) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetPayload()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateUserRequestValidationError{
				field:  "Payload",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for UserId

	return nil
}

// UpdateUserRequestValidationError is the validation error returned by
// UpdateUserRequest.Validate if the designated constraints aren't met.
type UpdateUserRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateUserRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateUserRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateUserRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateUserRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateUserRequestValidationError) ErrorName() string {
	return "UpdateUserRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateUserRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateUserRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateUserRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateUserRequestValidationError{}

// Validate checks the field values on UpdateUserResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *UpdateUserResponse) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetResponse()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateUserResponseValidationError{
				field:  "Response",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// UpdateUserResponseValidationError is the validation error returned by
// UpdateUserResponse.Validate if the designated constraints aren't met.
type UpdateUserResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateUserResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateUserResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateUserResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateUserResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateUserResponseValidationError) ErrorName() string {
	return "UpdateUserResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateUserResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateUserResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateUserResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateUserResponseValidationError{}

// Validate checks the field values on MultiGetUsersByExternalIdRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, an error is returned.
func (m *MultiGetUsersByExternalIdRequest) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// MultiGetUsersByExternalIdRequestValidationError is the validation error
// returned by MultiGetUsersByExternalIdRequest.Validate if the designated
// constraints aren't met.
type MultiGetUsersByExternalIdRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MultiGetUsersByExternalIdRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MultiGetUsersByExternalIdRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MultiGetUsersByExternalIdRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MultiGetUsersByExternalIdRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MultiGetUsersByExternalIdRequestValidationError) ErrorName() string {
	return "MultiGetUsersByExternalIdRequestValidationError"
}

// Error satisfies the builtin error interface
func (e MultiGetUsersByExternalIdRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMultiGetUsersByExternalIdRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MultiGetUsersByExternalIdRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MultiGetUsersByExternalIdRequestValidationError{}

// Validate checks the field values on MultiGetUsersByInternalIdRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, an error is returned.
func (m *MultiGetUsersByInternalIdRequest) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// MultiGetUsersByInternalIdRequestValidationError is the validation error
// returned by MultiGetUsersByInternalIdRequest.Validate if the designated
// constraints aren't met.
type MultiGetUsersByInternalIdRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MultiGetUsersByInternalIdRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MultiGetUsersByInternalIdRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MultiGetUsersByInternalIdRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MultiGetUsersByInternalIdRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MultiGetUsersByInternalIdRequestValidationError) ErrorName() string {
	return "MultiGetUsersByInternalIdRequestValidationError"
}

// Error satisfies the builtin error interface
func (e MultiGetUsersByInternalIdRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMultiGetUsersByInternalIdRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MultiGetUsersByInternalIdRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MultiGetUsersByInternalIdRequestValidationError{}

// Validate checks the field values on MultiGetUsersResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *MultiGetUsersResponse) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetResponse() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return MultiGetUsersResponseValidationError{
					field:  fmt.Sprintf("Response[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// MultiGetUsersResponseValidationError is the validation error returned by
// MultiGetUsersResponse.Validate if the designated constraints aren't met.
type MultiGetUsersResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MultiGetUsersResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MultiGetUsersResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MultiGetUsersResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MultiGetUsersResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MultiGetUsersResponseValidationError) ErrorName() string {
	return "MultiGetUsersResponseValidationError"
}

// Error satisfies the builtin error interface
func (e MultiGetUsersResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMultiGetUsersResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MultiGetUsersResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MultiGetUsersResponseValidationError{}

// Validate checks the field values on CreateUserIdentityRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *CreateUserIdentityRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for UserId

	if v, ok := interface{}(m.GetPayload()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateUserIdentityRequestValidationError{
				field:  "Payload",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// CreateUserIdentityRequestValidationError is the validation error returned by
// CreateUserIdentityRequest.Validate if the designated constraints aren't met.
type CreateUserIdentityRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateUserIdentityRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateUserIdentityRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateUserIdentityRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateUserIdentityRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateUserIdentityRequestValidationError) ErrorName() string {
	return "CreateUserIdentityRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateUserIdentityRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateUserIdentityRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateUserIdentityRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateUserIdentityRequestValidationError{}

// Validate checks the field values on CreateUserIdentityResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *CreateUserIdentityResponse) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetResponse()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateUserIdentityResponseValidationError{
				field:  "Response",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// CreateUserIdentityResponseValidationError is the validation error returned
// by CreateUserIdentityResponse.Validate if the designated constraints aren't met.
type CreateUserIdentityResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateUserIdentityResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateUserIdentityResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateUserIdentityResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateUserIdentityResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateUserIdentityResponseValidationError) ErrorName() string {
	return "CreateUserIdentityResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateUserIdentityResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateUserIdentityResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateUserIdentityResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateUserIdentityResponseValidationError{}

// Validate checks the field values on UpdateUserIdentityRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *UpdateUserIdentityRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for UserId

	// no validation rules for UserIdentityId

	if v, ok := interface{}(m.GetPayload()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateUserIdentityRequestValidationError{
				field:  "Payload",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// UpdateUserIdentityRequestValidationError is the validation error returned by
// UpdateUserIdentityRequest.Validate if the designated constraints aren't met.
type UpdateUserIdentityRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateUserIdentityRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateUserIdentityRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateUserIdentityRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateUserIdentityRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateUserIdentityRequestValidationError) ErrorName() string {
	return "UpdateUserIdentityRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateUserIdentityRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateUserIdentityRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateUserIdentityRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateUserIdentityRequestValidationError{}

// Validate checks the field values on UpdateUserIdentityResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *UpdateUserIdentityResponse) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetResponse()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateUserIdentityResponseValidationError{
				field:  "Response",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// UpdateUserIdentityResponseValidationError is the validation error returned
// by UpdateUserIdentityResponse.Validate if the designated constraints aren't met.
type UpdateUserIdentityResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateUserIdentityResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateUserIdentityResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateUserIdentityResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateUserIdentityResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateUserIdentityResponseValidationError) ErrorName() string {
	return "UpdateUserIdentityResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateUserIdentityResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateUserIdentityResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateUserIdentityResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateUserIdentityResponseValidationError{}

// Validate checks the field values on GetUserIdentityRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetUserIdentityRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for UserId

	// no validation rules for UserIdentityId

	return nil
}

// GetUserIdentityRequestValidationError is the validation error returned by
// GetUserIdentityRequest.Validate if the designated constraints aren't met.
type GetUserIdentityRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetUserIdentityRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetUserIdentityRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetUserIdentityRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetUserIdentityRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetUserIdentityRequestValidationError) ErrorName() string {
	return "GetUserIdentityRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetUserIdentityRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetUserIdentityRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetUserIdentityRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetUserIdentityRequestValidationError{}

// Validate checks the field values on GetUserIdentityResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetUserIdentityResponse) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetResponse()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetUserIdentityResponseValidationError{
				field:  "Response",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// GetUserIdentityResponseValidationError is the validation error returned by
// GetUserIdentityResponse.Validate if the designated constraints aren't met.
type GetUserIdentityResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetUserIdentityResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetUserIdentityResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetUserIdentityResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetUserIdentityResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetUserIdentityResponseValidationError) ErrorName() string {
	return "GetUserIdentityResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetUserIdentityResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetUserIdentityResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetUserIdentityResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetUserIdentityResponseValidationError{}

// Validate checks the field values on MultiGetUserIdentityRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *MultiGetUserIdentityRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for UserId

	return nil
}

// MultiGetUserIdentityRequestValidationError is the validation error returned
// by MultiGetUserIdentityRequest.Validate if the designated constraints
// aren't met.
type MultiGetUserIdentityRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MultiGetUserIdentityRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MultiGetUserIdentityRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MultiGetUserIdentityRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MultiGetUserIdentityRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MultiGetUserIdentityRequestValidationError) ErrorName() string {
	return "MultiGetUserIdentityRequestValidationError"
}

// Error satisfies the builtin error interface
func (e MultiGetUserIdentityRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMultiGetUserIdentityRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MultiGetUserIdentityRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MultiGetUserIdentityRequestValidationError{}

// Validate checks the field values on MultiGetUserIdentityResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *MultiGetUserIdentityResponse) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetResponse() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return MultiGetUserIdentityResponseValidationError{
					field:  fmt.Sprintf("Response[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// MultiGetUserIdentityResponseValidationError is the validation error returned
// by MultiGetUserIdentityResponse.Validate if the designated constraints
// aren't met.
type MultiGetUserIdentityResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MultiGetUserIdentityResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MultiGetUserIdentityResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MultiGetUserIdentityResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MultiGetUserIdentityResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MultiGetUserIdentityResponseValidationError) ErrorName() string {
	return "MultiGetUserIdentityResponseValidationError"
}

// Error satisfies the builtin error interface
func (e MultiGetUserIdentityResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMultiGetUserIdentityResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MultiGetUserIdentityResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MultiGetUserIdentityResponseValidationError{}

// Validate checks the field values on GetUserIdentitiesRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetUserIdentitiesRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for UserId

	return nil
}

// GetUserIdentitiesRequestValidationError is the validation error returned by
// GetUserIdentitiesRequest.Validate if the designated constraints aren't met.
type GetUserIdentitiesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetUserIdentitiesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetUserIdentitiesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetUserIdentitiesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetUserIdentitiesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetUserIdentitiesRequestValidationError) ErrorName() string {
	return "GetUserIdentitiesRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetUserIdentitiesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetUserIdentitiesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetUserIdentitiesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetUserIdentitiesRequestValidationError{}

// Validate checks the field values on GetUserIdentitiesResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetUserIdentitiesResponse) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetResponse() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetUserIdentitiesResponseValidationError{
					field:  fmt.Sprintf("Response[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// GetUserIdentitiesResponseValidationError is the validation error returned by
// GetUserIdentitiesResponse.Validate if the designated constraints aren't met.
type GetUserIdentitiesResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetUserIdentitiesResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetUserIdentitiesResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetUserIdentitiesResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetUserIdentitiesResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetUserIdentitiesResponseValidationError) ErrorName() string {
	return "GetUserIdentitiesResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetUserIdentitiesResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetUserIdentitiesResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetUserIdentitiesResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetUserIdentitiesResponseValidationError{}

// Validate checks the field values on CreateUserAddressRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *CreateUserAddressRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for UserId

	if v, ok := interface{}(m.GetPayload()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateUserAddressRequestValidationError{
				field:  "Payload",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// CreateUserAddressRequestValidationError is the validation error returned by
// CreateUserAddressRequest.Validate if the designated constraints aren't met.
type CreateUserAddressRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateUserAddressRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateUserAddressRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateUserAddressRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateUserAddressRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateUserAddressRequestValidationError) ErrorName() string {
	return "CreateUserAddressRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateUserAddressRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateUserAddressRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateUserAddressRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateUserAddressRequestValidationError{}

// Validate checks the field values on CreateUserAddressResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *CreateUserAddressResponse) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetResponse()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateUserAddressResponseValidationError{
				field:  "Response",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// CreateUserAddressResponseValidationError is the validation error returned by
// CreateUserAddressResponse.Validate if the designated constraints aren't met.
type CreateUserAddressResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateUserAddressResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateUserAddressResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateUserAddressResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateUserAddressResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateUserAddressResponseValidationError) ErrorName() string {
	return "CreateUserAddressResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateUserAddressResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateUserAddressResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateUserAddressResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateUserAddressResponseValidationError{}

// Validate checks the field values on GetUserAddressesRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetUserAddressesRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for UserId

	return nil
}

// GetUserAddressesRequestValidationError is the validation error returned by
// GetUserAddressesRequest.Validate if the designated constraints aren't met.
type GetUserAddressesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetUserAddressesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetUserAddressesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetUserAddressesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetUserAddressesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetUserAddressesRequestValidationError) ErrorName() string {
	return "GetUserAddressesRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetUserAddressesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetUserAddressesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetUserAddressesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetUserAddressesRequestValidationError{}

// Validate checks the field values on GetUserAddressesResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetUserAddressesResponse) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetAddresses() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetUserAddressesResponseValidationError{
					field:  fmt.Sprintf("Addresses[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// GetUserAddressesResponseValidationError is the validation error returned by
// GetUserAddressesResponse.Validate if the designated constraints aren't met.
type GetUserAddressesResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetUserAddressesResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetUserAddressesResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetUserAddressesResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetUserAddressesResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetUserAddressesResponseValidationError) ErrorName() string {
	return "GetUserAddressesResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetUserAddressesResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetUserAddressesResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetUserAddressesResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetUserAddressesResponseValidationError{}

// Validate checks the field values on UpdateUserAddressRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *UpdateUserAddressRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for UserId

	// no validation rules for AddressId

	if v, ok := interface{}(m.GetPayload()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateUserAddressRequestValidationError{
				field:  "Payload",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// UpdateUserAddressRequestValidationError is the validation error returned by
// UpdateUserAddressRequest.Validate if the designated constraints aren't met.
type UpdateUserAddressRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateUserAddressRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateUserAddressRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateUserAddressRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateUserAddressRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateUserAddressRequestValidationError) ErrorName() string {
	return "UpdateUserAddressRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateUserAddressRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateUserAddressRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateUserAddressRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateUserAddressRequestValidationError{}

// Validate checks the field values on UpdateUserAddressResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *UpdateUserAddressResponse) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetAddress()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateUserAddressResponseValidationError{
				field:  "Address",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// UpdateUserAddressResponseValidationError is the validation error returned by
// UpdateUserAddressResponse.Validate if the designated constraints aren't met.
type UpdateUserAddressResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateUserAddressResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateUserAddressResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateUserAddressResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateUserAddressResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateUserAddressResponseValidationError) ErrorName() string {
	return "UpdateUserAddressResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateUserAddressResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateUserAddressResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateUserAddressResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateUserAddressResponseValidationError{}

// Validate checks the field values on CreateUserRelationRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *CreateUserRelationRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for UserId

	if v, ok := interface{}(m.GetPayload()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateUserRelationRequestValidationError{
				field:  "Payload",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// CreateUserRelationRequestValidationError is the validation error returned by
// CreateUserRelationRequest.Validate if the designated constraints aren't met.
type CreateUserRelationRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateUserRelationRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateUserRelationRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateUserRelationRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateUserRelationRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateUserRelationRequestValidationError) ErrorName() string {
	return "CreateUserRelationRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateUserRelationRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateUserRelationRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateUserRelationRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateUserRelationRequestValidationError{}

// Validate checks the field values on CreateUserRelationResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *CreateUserRelationResponse) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetRelation()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateUserRelationResponseValidationError{
				field:  "Relation",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// CreateUserRelationResponseValidationError is the validation error returned
// by CreateUserRelationResponse.Validate if the designated constraints aren't met.
type CreateUserRelationResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateUserRelationResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateUserRelationResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateUserRelationResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateUserRelationResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateUserRelationResponseValidationError) ErrorName() string {
	return "CreateUserRelationResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateUserRelationResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateUserRelationResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateUserRelationResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateUserRelationResponseValidationError{}

// Validate checks the field values on GetUserRelationsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetUserRelationsRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for UserId

	return nil
}

// GetUserRelationsRequestValidationError is the validation error returned by
// GetUserRelationsRequest.Validate if the designated constraints aren't met.
type GetUserRelationsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetUserRelationsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetUserRelationsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetUserRelationsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetUserRelationsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetUserRelationsRequestValidationError) ErrorName() string {
	return "GetUserRelationsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetUserRelationsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetUserRelationsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetUserRelationsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetUserRelationsRequestValidationError{}

// Validate checks the field values on GetUserRelationsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetUserRelationsResponse) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetRelations() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetUserRelationsResponseValidationError{
					field:  fmt.Sprintf("Relations[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// GetUserRelationsResponseValidationError is the validation error returned by
// GetUserRelationsResponse.Validate if the designated constraints aren't met.
type GetUserRelationsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetUserRelationsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetUserRelationsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetUserRelationsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetUserRelationsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetUserRelationsResponseValidationError) ErrorName() string {
	return "GetUserRelationsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetUserRelationsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetUserRelationsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetUserRelationsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetUserRelationsResponseValidationError{}

// Validate checks the field values on DeleteUserRelationRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *DeleteUserRelationRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for UserId

	// no validation rules for RelationId

	return nil
}

// DeleteUserRelationRequestValidationError is the validation error returned by
// DeleteUserRelationRequest.Validate if the designated constraints aren't met.
type DeleteUserRelationRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteUserRelationRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteUserRelationRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteUserRelationRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteUserRelationRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteUserRelationRequestValidationError) ErrorName() string {
	return "DeleteUserRelationRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteUserRelationRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteUserRelationRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteUserRelationRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteUserRelationRequestValidationError{}

// Validate checks the field values on DeleteUserRelationResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *DeleteUserRelationResponse) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetRelation()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DeleteUserRelationResponseValidationError{
				field:  "Relation",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// DeleteUserRelationResponseValidationError is the validation error returned
// by DeleteUserRelationResponse.Validate if the designated constraints aren't met.
type DeleteUserRelationResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteUserRelationResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteUserRelationResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteUserRelationResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteUserRelationResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteUserRelationResponseValidationError) ErrorName() string {
	return "DeleteUserRelationResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteUserRelationResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteUserRelationResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteUserRelationResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteUserRelationResponseValidationError{}
